@startuml

class MediatorExample {
    + {static} void main(String[] args)
}

abstract class BankEntity {
    ~ BankServiceOrganizer bOrganizer
    + BankEntity(BankServiceOrganizer bo)
    + void changed()
}

interface BankServiceOrganizer {
    + void entityChanged(BankEntity be);
}

abstract class Bank {
    # BankServiceOrganizer bso;
    + {abstract} void customerArrive(int index);
    + {abstract} void endService(int index);
    + {abstract} void showStatus();
}

class LittleBank extends Bank {
    + LittleBank()
    + void customerArrive(int index)
    + void endService(int index)
    + void showStatus()
}

class LittleBankServiceOrganizer implements BankServiceOrganizer {
    -{static} int QUEUES = 2, TELLERS = 2;
    - ArrayList<Queue> queues;
    - ArrayList<Teller> tellers;

    + LittleBankServiceOrganizer()
    + int getQueueNumber()
    + int getTellerNumber()
    + Queue getQueue(int index)
    + Teller getTeller(int index)
    + void createBankEntities()
    + void entityChanged(BankEntity bankEntity)
}

class Queue extends BankEntity {
    - int size;
    + Queue(BankServiceOrganizer bo)
    + void dequeue()
    + void enqueue()
    + int getSize()
}

class Teller extends BankEntity {
    - boolean isFree;
    + Teller(BankServiceOrganizer bo)
    + void initService(Queue q)
    + void endService()
    + boolean isFree()
}

MediatorExample -down-> Bank
LittleBank -> LittleBankServiceOrganizer
LittleBankServiceOrganizer -> Queue
LittleBankServiceOrganizer -> Teller
BankEntity --Left-> BankServiceOrganizer

note top of BankServiceOrganizer
    <b>Mediator</b> - defines an interface for
    communicating with Colleague objects.
end note

note top of BankEntity
    <b>Colleague</b> - defines an abstract class
    for concrete colleague classes.
end note

note bottom of LittleBankServiceOrganizer
    <b>Concrete Mediator</b> - implements cooperative
    behavior by coordinating Colleague objects.
    Knows and maintains its colleagues.
end note

note as NOTE
<b>Colleague classes</b> - each Colleague class knows its
Mediator object. Each colleague communicates with its
mediator whenever it would have otherwise communicated
with another colleague.
end note
Queue .. NOTE
NOTE .. Teller

@enduml